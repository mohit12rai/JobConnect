     {/* Search Seekers Section */}
              <Animatable.View
                animation="fadeIn"
                duration={800}
                style={[
                  styles.searchSection,
                  isDarkMode ? styles.darkSearchSection : styles.lightSearchSection,
                ]}
              >
                <Text
                  style={[
                    styles.sectionTitle,
                    isDarkMode ? styles.darkText : styles.lightText,
                  ]}
                >
                  Search Job Seekers
                </Text>

                <View style={styles.searchContent}>
                  {/* Location Dropdown */}
                  <View
                    style={[
                      styles.fullWidthDropdownContainer,
                      isDarkMode
                        ? styles.darkSearchInputContainer
                        : styles.lightSearchInputContainer,
                    ]}
                  >
                    <MaterialIcons
                      name="location-on"
                      size={20}
                      color={isDarkMode ? '#aaa' : '#555'}
                    />

                    <View style={{ flex: 1 }}>
                      <RNPickerSelect
                        onValueChange={setLocationQuery}
                        placeholder={{ label: 'Select Location', value: '' }}
                        items={locationOptions}
                        style={{
                          ...pickerStyle,
                          inputIOS: {
                            ...pickerStyle.inputIOS,
                            width: '100%',
                          },
                          inputAndroid: {
                            ...pickerStyle.inputAndroid,
                            width: '100%',
                          },
                        }}
                        value={locationQuery}
                        useNativeAndroidPickerStyle={false}
                        Icon={() => (
                          <MaterialIcons
                            name="arrow-drop-down"
                            size={20}
                            color={isDarkMode ? '#aaa' : '#555'}
                          />
                        )}
                      />
                    </View>
                  </View>

                  {/* Job Skills Dropdown */}
                  <View
                    style={[
                      styles.fullWidthDropdownContainer,
                      isDarkMode
                        ? styles.darkSearchInputContainer
                        : styles.lightSearchInputContainer,
                    ]}
                  >
                    <MaterialIcons
                      name="work"
                      size={20}
                      color={isDarkMode ? '#aaa' : '#555'}
                    />

                    <View style={{ flex: 1 }}>
                      <RNPickerSelect
                        onValueChange={setSeekerQuery}
                        placeholder={{ label: 'Search by Skill', value: '' }}
                        items={jobOptions}
                        style={{
                          ...pickerStyle,
                          inputIOS: {
                            ...pickerStyle.inputIOS,
                            width: '100%',
                          },
                          inputAndroid: {
                            ...pickerStyle.inputAndroid,
                            width: '100%',
                          },
                        }}
                        value={seekerQuery}
                        useNativeAndroidPickerStyle={false}
                        Icon={() => (
                          <MaterialIcons
                            name="arrow-drop-down"
                            size={20}
                            color={isDarkMode ? '#aaa' : '#555'}
                          />
                        )}
                      />
                    </View>
                  </View>

                  <TouchableOpacity
                    style={[
                      styles.searchButton,
                      isDarkMode ? styles.darkSearchButton : styles.lightSearchButton,
                    ]}
                    onPress={handleSearchSeekers}
                    disabled={isSearching}
                  >
                    {isSearching ? (
                      <ActivityIndicator color="#fff" />
                    ) : (
                      <Text style={styles.searchButtonText}>Search Seekers</Text>
                    )}
                  </TouchableOpacity>
                </View>
              </Animatable.View>


              -------provider Profile------
                <Animatable.View
                animation="fadeIn"
                duration={600}
                style={[styles.profileCard, isDarkMode ? styles.darkCard : styles.lightCard]}
              >
                <Text style={[styles.profileTitle, isDarkMode ? styles.darkText : styles.lightText]}>
                  Your Profile
                </Text>

                <View style={styles.profileRow}>
                  <MaterialIcons name="person" size={18} color={isDarkMode ? '#aaa' : '#555'} />
                  <Text style={[styles.profileText, isDarkMode ? styles.darkText : styles.lightText]}>
                    {user.hrName || 'Not specified'}
                  </Text>
                </View>

                <View style={styles.profileRow}>
                  <MaterialIcons name="business" size={18} color={isDarkMode ? '#aaa' : '#555'} />
                  <Text style={[styles.profileText, isDarkMode ? styles.darkText : styles.lightText]}>
                    {user.companyName || 'Not specified'}
                  </Text>
                </View>

                <View style={styles.profileRow}>
                  <MaterialIcons name="email" size={18} color={isDarkMode ? '#aaa' : '#555'} />
                  <Text style={[styles.profileText, isDarkMode ? styles.darkText : styles.lightText]}>
                    {user.email || 'Not specified'}
                  </Text>
                </View>

                <View style={styles.profileRow}>
                  <MaterialIcons name="phone" size={18} color={isDarkMode ? '#aaa' : '#555'} />
                  <Text style={[styles.profileText, isDarkMode ? styles.darkText : styles.lightText]}>
                    {user.hrWhatsappNumber || 'Not specified'}
                  </Text>
                </View>
              </Animatable.View>



              -------------provider-----------

              import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  FlatList,
  StyleSheet,
  Modal,
  Linking,
  ScrollView,
  Alert,
  Animated,
  Dimensions,
  ActivityIndicator
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { MaterialIcons, FontAwesome, Ionicons } from '@expo/vector-icons';
import { getProfile, postJob, searchJobs, getApplicants, updateJob, deleteJob, changeJobAvailibility, searchSeekers } from '../utils/api';
import Header from '../components/Header';
import Footer from '../components/Footer';
import AsyncStorage from '@react-native-async-storage/async-storage';
import RNPickerSelect from 'react-native-picker-select';
import * as Animatable from 'react-native-animatable';
// import { FontAwesome } from '@expo/vector-icons';
import Toast from 'react-native-toast-message';
import { Picker } from 'react-native';
const { width, height } = Dimensions.get('window');



export default function ProviderDashboard({ isDarkMode, toggleDarkMode, route }) {
  // State initialization
  const [user, setUser] = useState(route?.params?.user || null);
  const [skills, setSkills] = useState('');
  const [experienceRequired, setExperienceRequired] = useState('');
  const [showSeekerProfileModal, setShowSeekerProfileModal] = useState(false);
  const [location, setLocation] = useState('');
  const [maxCTC, setMaxCTC] = useState('');
  const [noticePeriod, setNoticePeriod] = useState('');
  const [seekerQuery, setSeekerQuery] = useState('');
  const [locationQuery, setLocationQuery] = useState('');
  const [seekers, setSeekers] = useState([]);
  const [postedJobs, setPostedJobs] = useState([]);
  const [selectedJobForDelete, setSelectedJobForDelete] = useState(null);
  const [applicants, setApplicants] = useState([]);
  const [selectedJobId, setSelectedJobId] = useState(null);
  const [showDeleteJobModal, setShowDeleteJobModal] = useState(false);
  const [selectedSeekerId, setSelectedSeekerId] = useState(null);
  const [selectedJobForEdit, setSelectedJobForEdit] = useState(null);
  const [showPostJobModal, setShowPostJobModal] = useState(false);
  const [jobFilter, setJobFilter] = useState('Active');
  const [isSearching, setIsSearching] = useState(false);
  const [selectedJob,setSelectedJob]=useState('')

  const role=route?.params?.user
  console.log("role=",role)
  // Refs and animations
  const navigation = useNavigation();
  const fadeAnim = useRef(new Animated.Value(0)).current;
 
 
   
   const handleSearchPress = async() => {
     const role = await AsyncStorage.getItem('role');
    if (role === 'provider') {
      navigation.navigate('JobResultsScreen',{ role: 'provider' });
    } 
  };
  useEffect(() => {
    const init = async () => {
      try {
        let currentUser = user;

        if (!currentUser) {
          const storedUser = await AsyncStorage.getItem('user');
          if (storedUser) {
            currentUser = JSON.parse(storedUser);
            setUser(currentUser);
          }
        }

        if (!currentUser && route?.params?.contact) {
          const isEmail = route.params.contact.includes('@');
          const response = await getProfile({
            role: 'provider',
            ...(isEmail
              ? { email: route.params.contact }
              : { whatsappNumber: route.params.contact }),
          });
          currentUser = response.data;
          setUser(currentUser);
          await AsyncStorage.setItem('user', JSON.stringify({ ...currentUser, role: 'provider' }));
        }

        if (!currentUser) {
          navigation.navigate('JobsList');
          return;
        }

        await fetchData(currentUser);

        // Fade in animation
        Animated.timing(fadeAnim, {
          toValue: 1,
          duration: 800,
          useNativeDriver: true,
        }).start();
      } catch (error) {
        console.error('Init error:', error);
        navigation.navigate('JobsList');
      }
    };

    init();
  }, [route, navigation]);

  const fetchData = async (currentUser) => {
    try {
      const jobsResponse = await searchJobs({ postedBy: currentUser._id });
      setPostedJobs(jobsResponse.data);

      const applicantsResponse = await getApplicants(currentUser._id);
      setApplicants(applicantsResponse.data);
    } catch (error) {
      Alert.alert('Error', 'Failed to fetch data: ' + error.message);
    }
  };

  const handlePostJob = async () => {
    try {
      const jobData = {
        skills: skills.split(',').map(s => s.trim()),
        experienceRequired: parseInt(experienceRequired) || 0,
        location,
        maxCTC: parseInt(maxCTC) || 0,
        noticePeriod,
        postedBy: { _id: user?._id },
        //available: true, // Add this line to make jobs active by default

      };

      const response = await postJob(jobData);
      Alert.alert('Success', 'Job posted successfully');
      setSkills('');
      setExperienceRequired('');
      setLocation('');
      setMaxCTC('');
      setNoticePeriod('');
      setShowPostJobModal(false);
      fetchData(user);
    } catch (error) {
      Alert.alert('Error', 'Failed to post job: ' + error.message);
    }
  };

  const handleUpdateJob = async () => {
    if (!selectedJobForEdit) {
      ToastAndroid.show('Job updated successfully!', ToastAndroid.SHORT);

      // Alert.alert('Error', 'No job selected for editing.');
      return;
    }

    try {
      const jobData = {
        skills: skills.split(',').map(s => s.trim()),
        experienceRequired: parseInt(experienceRequired) || 0,
        location,
        maxCTC: parseInt(maxCTC) || 0,
        noticePeriod,
        postedBy: user?._id,
        _id: selectedJobForEdit._id,
        // available: selectedJobForEdit.available, // Preserve the current availability status

      };

      const response = await updateJob(jobData);
      Toast.show({
        type: 'success',
        text1: 'Job updated successfully',
      });
      Alert.alert('Success', 'Job updated successfully');
      setSkills('');
      setExperienceRequired('');
      setLocation('');
      setMaxCTC('');
      setNoticePeriod('');
      setSelectedJobForEdit(null);
      fetchData(user);
    } catch (error) {
      Alert.alert('Error', 'Failed to update job: ' + error.message);
    }
  };

  const handleDeleteJob = async (jobId) => {
    try {
      await deleteJob({ jobId });
      Alert.alert('Success', 'Job deleted successfully');
      setShowDeleteJobModal(false);
      fetchData(user);
    } catch (error) {
      Alert.alert('Error', 'Failed to delete job: ' + error.message);
    }
  };

 

  const handleViewApplicants = async (jobId) => {
    try {
      const providerId = user?._id;
      const response = await getApplicants(providerId, jobId);
      setApplicants(response.data);
      setSelectedJobId(jobId);
    } catch (error) {
      Alert.alert('Error', 'Failed to fetch applicants: ' + error.message);
    }
  };

  const handleViewSeekerProfile = (seekerId) => {
    if (!seekerId) {
      Alert.alert('Error', 'No seeker selected');
      return;
    }
    setSelectedJobId(null);
    setSelectedSeekerId(seekerId);
    setShowSeekerProfileModal(true);
  };

  const handleEditJob = (job) => {
    setSelectedJobForEdit(job);
    setSkills((job.skills || []).join(', '));
    setExperienceRequired(job.experienceRequired?.toString() || '');
    setLocation(job.location || '');
    setMaxCTC(job.maxCTC?.toString() || '');
    setNoticePeriod(job.noticePeriod || '');
  };

  const handleCloseSeekerProfileModal = () => {
    setShowSeekerProfileModal(false);
    setSelectedSeekerId(null);
  };

  const handleWhatsAppConnect = (number, seekerName) => {
    if (!number) {
      Alert.alert('Error', 'Phone number is missing');
      return;
    }

    const cleanedNumber = number.replace(/\D/g, ''); // Keep only digits
    const defaultMessage = `Hi ${seekerName}, I'm interested in discussing job opportunities with you`;

    const url = `https://api.whatsapp.com/send?phone=${cleanedNumber}&text=${encodeURIComponent(defaultMessage)}`;

    Linking.canOpenURL(url)
      .then((supported) => {
        if (supported) {
          Linking.openURL(url);
          Alert.alert('Success', `Connected with ${seekerName} via WhatsApp`);
        } else {
          Alert.alert('Error', 'Unable to open WhatsApp');
        }
      })
      .catch((err) => {
        console.error('Error opening WhatsApp:', err);
        Alert.alert('Error', 'An unexpected error occurred');
      });
  };


  const handleActiveInactiveJob = async (job) => {
    try {
      const jobId = job._id;
      const response = await changeJobAvailibility(jobId);
      if (response.data.success) {
        setPostedJobs(prevJobs =>
          prevJobs.map(j => j._id === jobId ? { ...j, available: !j.available } : j)
        );
        Alert.alert('Success', `Job marked as ${!job.available ? 'Active' : 'Inactive'}`);
      } else {
        throw new Error(response.data.message || "Failed to toggle availability");
      }
    } catch (error) {
      Alert.alert('Error', 'Failed to change job availability: ' + error.message);
    }
  };


  const getApplicantCount = (jobId) => {
    return applicants.filter(applicant => applicant.jobId === jobId).length;
  };

  const filteredJobs = () => {
    if (jobFilter === 'Active') return postedJobs.filter(job => job.available);
    if (jobFilter === 'Inactive') return postedJobs.filter(job => !job.available);
    return postedJobs;
  };

  const renderSeekerProfile = (seeker) => {
    if (!seeker) {
      return (
        <View>
          <Text style={[styles.itemText, isDarkMode ? styles.darkText : styles.lightText]}>
            No seeker data available.
          </Text>
        </View>
      );
    }

    return (
      <Animatable.View animation="fadeIn" duration={500}>
        <View style={styles.profileHeader}>
          <View style={[styles.avatar, isDarkMode ? styles.darkAvatar : styles.lightAvatar]}>
            {/* <Text style={styles.avatarText}>
              {seeker.fullName?.charAt(0)?.toUpperCase() || 'J'}
            </Text> */}
          </View>
          <Text style={[styles.seekerModalName, isDarkMode ? styles.darkText : styles.lightText]}>
            {seeker.fullName || 'Job Seeker'}
          </Text>
        </View>

        <View style={styles.detailCard}>
          <View style={styles.detailItem}>
            <MaterialIcons name="email" size={20} color={isDarkMode ? '#aaa' : '#555'} />
            <Text style={[styles.detailText, isDarkMode ? styles.darkText : styles.lightText]}>
              {seeker.email || 'Not specified'}
            </Text>
          </View>

          <View style={styles.detailItem}>
            <MaterialIcons name="phone" size={20} color={isDarkMode ? '#aaa' : '#555'} />
            <Text style={[styles.detailText, isDarkMode ? styles.darkText : styles.lightText]}>
              {seeker.whatsappNumber || 'Not specified'}
            </Text>
          </View>

          <View style={styles.detailItem}>
            <MaterialIcons name="work" size={20} color={isDarkMode ? '#aaa' : '#555'} />
            <Text style={[styles.detailText, isDarkMode ? styles.darkText : styles.lightText]}>
              {seeker.skills?.join(', ') || 'Not specified'}
            </Text>
          </View>

          <View style={styles.detailItem}>
            <MaterialIcons name="star" size={20} color={isDarkMode ? '#aaa' : '#555'} />
            <Text style={[styles.detailText, isDarkMode ? styles.darkText : styles.lightText]}>
              {seeker.experience || 0} years experience
            </Text>
          </View>

          <View style={styles.detailItem}>
            <MaterialIcons name="location-on" size={20} color={isDarkMode ? '#aaa' : '#555'} />
            <Text style={[styles.detailText, isDarkMode ? styles.darkText : styles.lightText]}>
              {seeker.location || 'Not specified'}
            </Text>
          </View>
        </View>

        <TouchableOpacity
          style={[styles.whatsappButton, isDarkMode ? styles.darkButton : styles.lightButton]}
          onPress={() => handleWhatsAppConnect(seeker.whatsappNumber, seeker.fullName)}
        >
          <FontAwesome name="whatsapp" size={20} color="#fff" />
          <Text style={styles.whatsappButtonText}>Connect via WhatsApp</Text>
        </TouchableOpacity>
      </Animatable.View>
    );
  };

  const renderJobItem = ({ item, index }) => {
    return (
      <Animatable.View
        animation="fadeInUp"
        duration={400}
        delay={index * 100}
        style={[styles.jobCard, isDarkMode ? styles.darkJobCard : styles.lightJobCard]}
      >
        <View style={styles.jobHeader}>
          <Text style={[styles.jobTitle, isDarkMode ? styles.darkText : styles.lightText]}>
            {item.skills?.join(' | ') || 'No skills specified'}
          </Text>
          <TouchableOpacity
            onPress={() => handleActiveInactiveJob(item)}
            style={[styles.statusBadge, item.available ? styles.activeBadge : styles.inactiveBadge]}
          >
            <Text style={styles.statusText}>{item.available ? 'Deactive' : 'Active'}</Text>
          </TouchableOpacity>
        </View>

        <View style={styles.jobDetails}>
          <View style={styles.detailRow}>
            <MaterialIcons name="work" size={16} color={isDarkMode ? '#aaa' : '#555'} />
            <Text style={[styles.detailText, isDarkMode ? styles.darkDetailText : styles.lightDetailText]}>
              {item.experienceRequired || 0} years experience
            </Text>
          </View>

          <View style={styles.detailRow}>
            <MaterialIcons name="location-on" size={16} color={isDarkMode ? '#aaa' : '#555'} />
            <Text style={[styles.detailText, isDarkMode ? styles.darkDetailText : styles.lightDetailText]}>
              {item.location || 'Location not specified'}
            </Text>
          </View>

          <View style={styles.detailRow}>
            <FontAwesome name="money" size={16} color={isDarkMode ? '#aaa' : '#555'} />
            <Text style={[styles.detailText, isDarkMode ? styles.darkDetailText : styles.lightDetailText]}>
              ₹{item.maxCTC || '0'}/month
            </Text>
          </View>


        </View>

        <View style={styles.jobActions}>
          <TouchableOpacity
            style={[styles.actionBtn, styles.viewApplicantsBtn]}
            onPress={() => handleViewApplicants(item._id)}
          >
            <Text style={styles.actionBtnText}>Applied ({getApplicantCount(item._id)})</Text>
          </TouchableOpacity>

          <View style={styles.iconActions}>
            <TouchableOpacity
              style={[styles.iconBtn, isDarkMode ? styles.darkIconBtn : styles.lightIconBtn]}
              onPress={() => handleEditJob(item)}
            >
              <MaterialIcons name="edit" size={20} color={isDarkMode ? '#ddd' : '#333'} />
            </TouchableOpacity>

            <TouchableOpacity
              style={[styles.iconBtn, styles.deleteBtn]}
              onPress={() => {
                setSelectedJobForDelete(item._id);
                setShowDeleteJobModal(true);
              }}
            >
              <MaterialIcons name="delete" size={20} color="#fff" />
            </TouchableOpacity>
          </View>
        </View>
      </Animatable.View>
    );
  };

  const renderModalContainer = (children, style = {}) => (
    <View style={[styles.modalOverlay, { pointerEvents: 'auto' }]}>
      <Animatable.View
        animation="fadeInUp"
        duration={400}
        style={[
          styles.modalContainer,
          isDarkMode ? styles.darkModalContainer : styles.lightModalContainer,
          style
        ]}
      >
        {children}
      </Animatable.View>
    </View>
  );

 
  return (
    <Animated.View style={[styles.container, isDarkMode ? styles.darkContainer : styles.lightContainer, { opacity: fadeAnim }]}>
      <Header title="Provider Dashboard" toggleDarkMode={toggleDarkMode} isDarkMode={isDarkMode} />

     
      <TouchableOpacity 
      style={styles.searchcontainer}
      onPress={handleSearchPress}
      activeOpacity={0.8}
    >
      <View style={styles.searchcontent}>
        <Ionicons name="search" size={20} color="#999" style={styles.icon} />
        <Text style={styles.text}>Search seekers </Text>
        <Ionicons name="mic" size={20} color="#999" />
      </View>
    </TouchableOpacity>
      
      

      <ScrollView contentContainerStyle={styles.scrollContent}>
        <View style={styles.content}>
          {user ? (
            <>
              {/* Profile Card */}
             

              {/* Post Job Button */}
              <Animatable.View animation="fadeIn" duration={700}>
                <TouchableOpacity
                  style={[styles.primaryButton, isDarkMode ? styles.darkPrimaryButton : styles.lightPrimaryButton]}
                  onPress={() => setShowPostJobModal(true)}
                >
                  <MaterialIcons name="post-add" size={24} color="#fff" />
                  <Text style={styles.primaryButtonText}>Post a New Job</Text>
                </TouchableOpacity>
              </Animatable.View>

              {/* Search Seekers Section */}

           

              {/* Posted Jobs Section */}
              <Animatable.View
                animation="fadeInUp"
                duration={900}
                style={styles.section}
              >
                <View style={styles.sectionHeader}>
                  <Text style={[styles.sectionTitle, isDarkMode ? styles.darkText : styles.lightText]}>
                    Your Posted Jobs ({postedJobs.length})
                  </Text>

                  {postedJobs.length > 0 && (
                    <View style={[styles.filterContainer, isDarkMode ? styles.darkFilterContainer : styles.lightFilterContainer]}>
                      <TouchableOpacity
                        style={[styles.filterButton, jobFilter === 'Active' && styles.activeFilterButton]}
                        onPress={() => setJobFilter('Active')}
                      >
                        <Text style={[styles.filterButtonText, jobFilter === 'Active' && styles.activeFilterButtonText]}>Active</Text>
                      </TouchableOpacity>
                      <TouchableOpacity
                        style={[styles.filterButton, jobFilter === 'Inactive' && styles.activeFilterButton]}
                        onPress={() => setJobFilter('Inactive')}
                      >
                        <Text style={[styles.filterButtonText, jobFilter === 'Inactive' && styles.activeFilterButtonText]}>Deactive</Text>
                      </TouchableOpacity>
                    </View>
                  )}
                </View>

                {postedJobs.length === 0 ? (
                  <Animatable.View
                    animation="fadeIn"
                    duration={600}
                    style={styles.emptyState}
                  >
                    <MaterialIcons name="work-off" size={40} color={isDarkMode ? '#555' : '#aaa'} />
                    <Text style={[styles.emptyStateText, isDarkMode ? styles.darkText : styles.lightText]}>
                      No jobs posted yet
                    </Text>
                    <TouchableOpacity
                      style={[styles.emptyStateButton, isDarkMode ? styles.darkButton : styles.lightButton]}
                      onPress={() => setShowPostJobModal(true)}
                    >
                      <Text style={styles.emptyStateButtonText}>Post Your First Job</Text>
                    </TouchableOpacity>
                  </Animatable.View>
                ) : (
                  <FlatList
                    data={filteredJobs()}
                    keyExtractor={(item) => item._id.toString()}
                    renderItem={renderJobItem}
                    scrollEnabled={false}
                  />
                )}
              </Animatable.View>

              {/* Post Job Modal */}
              {/* <Modal
                visible={showPostJobModal}
                transparent={true}
                animationType="slide"
                onRequestClose={() => setShowPostJobModal(false)}
              >
                {renderModalContainer(
                  <>
                    <Text style={[styles.modalTitle, isDarkMode ? styles.darkText : styles.lightText]}>
                      Post a New Job
                    </Text>

                    <ScrollView style={styles.modalScroll}>
                      <View style={styles.modalInputGroup}>
                        <Text style={[styles.modalLabel, isDarkMode ? styles.darkText : styles.lightText]}>
                          Job Names (comma-separated)
                        </Text>
                        <TextInput
                          style={[styles.modalInput, isDarkMode ? styles.darkInput : styles.lightInput]}
                          placeholder="e.g. SQL, JavaScript, React"
                          value={skills}
                          onChangeText={setSkills}
                          placeholderTextColor={isDarkMode ? '#888' : '#ccc'}
                        />
                      </View>

                      <View style={styles.modalInputGroup}>
                        <Text style={[styles.modalLabel, isDarkMode ? styles.darkText : styles.lightText]}>
                          Experience Required (Years)
                        </Text>
                        <TextInput
                          style={[styles.modalInput, isDarkMode ? styles.darkInput : styles.lightInput]}
                          placeholder="e.g. 2"
                          value={experienceRequired}
                          onChangeText={setExperienceRequired}
                          keyboardType="numeric"
                          placeholderTextColor={isDarkMode ? '#888' : '#ccc'}
                        />
                      </View>

                      <View style={styles.modalInputGroup}>
                        <Text style={[styles.modalLabel, isDarkMode ? styles.darkText : styles.lightText]}>
                          Location
                        </Text>
                        <TextInput
                          style={[styles.modalInput, isDarkMode ? styles.darkInput : styles.lightInput]}
                          placeholder="e.g. Pune"
                          value={location}
                          onChangeText={setLocation}
                          placeholderTextColor={isDarkMode ? '#888' : '#ccc'}
                        />
                      </View>

                      <View style={styles.modalInputGroup}>
                        <Text style={[styles.modalLabel, isDarkMode ? styles.darkText : styles.lightText]}>
                          Salary/Month (₹)
                        </Text>
                        <TextInput
                          style={[styles.modalInput, isDarkMode ? styles.darkInput : styles.lightInput]}
                          placeholder="e.g. 20000"
                          value={maxCTC}
                          onChangeText={setMaxCTC}
                          keyboardType="numeric"
                          placeholderTextColor={isDarkMode ? '#888' : '#ccc'}
                        />
                      </View>

                      
                    </ScrollView>

                    <View style={styles.modalButtonGroup}>
                      <TouchableOpacity
                        style={[styles.modalButton, styles.modalPrimaryButton]}
                        onPress={handlePostJob}
                      >
                        <Text style={styles.modalButtonText}>Post Job</Text>
                      </TouchableOpacity>

                      <TouchableOpacity
                        style={[styles.modalButton, isDarkMode ? styles.darkModalButton : styles.lightModalButton]}
                        onPress={() => setShowPostJobModal(false)}
                      >
                        <Text style={[styles.modalButtonText, isDarkMode ? styles.darkText : styles.lightText]}>
                          Cancel
                        </Text>
                      </TouchableOpacity>
                    </View>
                  </>
                )}
              </Modal> */}

<Modal
  visible={showPostJobModal}
  transparent={true}
  animationType="slide"
  onRequestClose={() => setShowPostJobModal(false)}
>
  {renderModalContainer(
    <>
      <Text style={[styles.modalTitle, isDarkMode ? styles.darkText : styles.lightText]}>
        Post a New Job
      </Text>

      <ScrollView style={styles.modalScroll} contentContainerStyle={styles.modalScrollContent}>
       {/* Job Name Dropdown */}
       <View style={styles.modalInputGroup}>
   <Text style={[styles.modalLabel, isDarkMode ? styles.darkText : styles.lightText]}>
    Job Title *
  </Text>
  <View style={[styles.dropdownContainer, isDarkMode ? styles.darkDropdown : styles.lightDropdown]}>
  <Picker
  selectedValue={selectedJob}
  onValueChange={(itemValue) => {
    setSelectedJob(itemValue);

    // ✅ Add selected job to skills if not already included
    if (itemValue && !skills.includes(itemValue)) {
      setSkills((prevSkills) => {
        if (prevSkills) {
          return prevSkills + ', ' + itemValue;
        } else {
          return itemValue;
        }
      });
    }
  }}
  style={[styles.dropdown, isDarkMode ? styles.darkText : styles.lightText]}
  dropdownIconColor={isDarkMode ? '#fff' : '#000'}
>
  <Picker.Item label="Select Job Title" value="" />
  <Picker.Item label="Frontend Developer" value="Frontend Developer" />
  <Picker.Item label="Backend Developer" value="Backend Developer" />
  <Picker.Item label="Full Stack Developer" value="Full Stack Developer" />
  <Picker.Item label="UI/UX Designer" value="UI/UX Designer" />
  <Picker.Item label="Data Scientist" value="Data Scientist" />
  <Picker.Item label="DevOps Engineer" value="DevOps Engineer" />
  <Picker.Item label="Mobile App Developer" value="Mobile App Developer" />
  <Picker.Item label="Python" value="Python" /> {/* Added Python for your example */}
</Picker>
  </View>
</View>

        {/* Experience Dropdown */}
        <View style={styles.modalInputGroup}>
          <Text style={[styles.modalLabel, isDarkMode ? styles.darkText : styles.lightText]}>
            Experience Required
          </Text>
          <View style={[styles.dropdownContainer, isDarkMode ? styles.darkDropdown : styles.lightDropdown]}>
            <Picker
              selectedValue={experienceRequired}
              onValueChange={(itemValue) => setExperienceRequired(itemValue)}
              style={[styles.dropdown, isDarkMode ? styles.darkText : styles.lightText]}
              dropdownIconColor={isDarkMode ? '#fff' : '#000'}
            >
              <Picker.Item label="Select Experience" value="" />
              <Picker.Item label="Fresher (0 years)" value="0" />
              <Picker.Item label="1-2 years" value="1-2" />
              <Picker.Item label="3-5 years" value="3-5" />
              <Picker.Item label="5-8 years" value="5-8" />
              <Picker.Item label="8+ years" value="8+" />
            </Picker>
          </View>
        </View>

        {/* Location Dropdown */}
        <View style={styles.modalInputGroup}>
          <Text style={[styles.modalLabel, isDarkMode ? styles.darkText : styles.lightText]}>
            Location
          </Text>
          <View style={[styles.dropdownContainer, isDarkMode ? styles.darkDropdown : styles.lightDropdown]}>
            <Picker
              selectedValue={location}
              onValueChange={(itemValue) => setLocation(itemValue)}
              style={[styles.dropdown, isDarkMode ? styles.darkText : styles.lightText]}
              dropdownIconColor={isDarkMode ? '#fff' : '#000'}
            >
              <Picker.Item label="Select Location" value="" />
              <Picker.Item label="Pune" value="Pune" />
              <Picker.Item label="Bangalore" value="Bangalore" />
              <Picker.Item label="Hyderabad" value="Hyderabad" />
              <Picker.Item label="Delhi" value="Delhi" />
              <Picker.Item label="Mumbai" value="Mumbai" />
              <Picker.Item label="Chennai" value="Chennai" />
              <Picker.Item label="Remote" value="Remote" />
            </Picker>
          </View>
        </View>

        {/* Salary Input */}
        <View style={styles.modalInputGroup}>
          <Text style={[styles.modalLabel, isDarkMode ? styles.darkText : styles.lightText]}>
            Salary/Month (₹)
          </Text>
          <TextInput
            style={[styles.modalInput, isDarkMode ? styles.darkInput : styles.lightInput]}
            placeholder="e.g. 20000"
            value={maxCTC}
            onChangeText={setMaxCTC}
            keyboardType="numeric"
            placeholderTextColor={isDarkMode ? '#888' : '#ccc'}
          />
        </View>
      </ScrollView>

      <View style={styles.modalButtonGroup}>
        <TouchableOpacity
          style={[styles.modalButton, styles.modalPrimaryButton]}
          onPress={handlePostJob}
        >
          <Text style={styles.modalButtonText}>Post Job</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.modalButton, isDarkMode ? styles.darkModalButton : styles.lightModalButton]}
          onPress={() => setShowPostJobModal(false)}
        >
          <Text style={[styles.modalButtonText, isDarkMode ? styles.darkText : styles.lightText]}>
            Cancel
          </Text>
        </TouchableOpacity>
      </View>
    </>
  )}
</Modal>
              {/* Edit Job Modal */}
              <Modal
                visible={!!selectedJobForEdit}
                transparent={true}
                animationType="slide"
                onRequestClose={() => setSelectedJobForEdit(null)}
              >
                {renderModalContainer(
                  <>
                    <Text style={[styles.modalTitle, isDarkMode ? styles.darkText : styles.lightText]}>
                      Edit Job
                    </Text>

                    <ScrollView style={styles.modalScroll}>
                      <View style={styles.modalInputGroup}>
                        <Text style={[styles.modalLabel, isDarkMode ? styles.darkText : styles.lightText]}>
                          Job Names (comma-separated)
                        </Text>
                        <TextInput
                          style={[styles.modalInput, isDarkMode ? styles.darkInput : styles.lightInput]}
                          placeholder="e.g. SQL, JavaScript, React"
                          value={skills}
                          onChangeText={setSkills}
                          placeholderTextColor={isDarkMode ? '#888' : '#ccc'}
                        />
                      </View>

                      <View style={styles.modalInputGroup}>
                        <Text style={[styles.modalLabel, isDarkMode ? styles.darkText : styles.lightText]}>
                          Experience Required (Years)
                        </Text>
                        <TextInput
                          style={[styles.modalInput, isDarkMode ? styles.darkInput : styles.lightInput]}
                          placeholder="e.g. 2"
                          value={experienceRequired}
                          onChangeText={setExperienceRequired}
                          keyboardType="numeric"
                          placeholderTextColor={isDarkMode ? '#888' : '#ccc'}
                        />
                      </View>

                      <View style={styles.modalInputGroup}>
                        <Text style={[styles.modalLabel, isDarkMode ? styles.darkText : styles.lightText]}>
                          Location
                        </Text>
                        <TextInput
                          style={[styles.modalInput, isDarkMode ? styles.darkInput : styles.lightInput]}
                          placeholder="e.g. Pune"
                          value={location}
                          onChangeText={setLocation}
                          placeholderTextColor={isDarkMode ? '#888' : '#ccc'}
                        />
                      </View>

                      <View style={styles.modalInputGroup}>
                        <Text style={[styles.modalLabel, isDarkMode ? styles.darkText : styles.lightText]}>
                          Salary/Month (₹)
                        </Text>
                        <TextInput
                          style={[styles.modalInput, isDarkMode ? styles.darkInput : styles.lightInput]}
                          placeholder="e.g. 20000"
                          value={maxCTC}
                          onChangeText={setMaxCTC}
                          keyboardType="numeric"
                          placeholderTextColor={isDarkMode ? '#888' : '#ccc'}
                        />
                      </View>

                     
                    </ScrollView>

                    <View style={styles.modalButtonGroup}>
                      <TouchableOpacity
                        style={[styles.modalButton, styles.modalPrimaryButton]}
                        onPress={handleUpdateJob}
                      >
                        <Text style={styles.modalButtonText}>Save Changes</Text>
                      </TouchableOpacity>

                      <TouchableOpacity
                        style={[styles.modalButton, isDarkMode ? styles.darkModalButton : styles.lightModalButton]}
                        onPress={() => setSelectedJobForEdit(null)}
                      >
                        <Text style={[styles.modalButtonText, isDarkMode ? styles.darkText : styles.lightText]}>
                          Cancel
                        </Text>
                      </TouchableOpacity>
                    </View>
                  </>
                )}
              </Modal>

              {/* Delete Job Confirmation Modal */}
              <Modal
                visible={showDeleteJobModal}
                transparent={true}
                animationType="fade"
                onRequestClose={() => setShowDeleteJobModal(false)}
              >
                {renderModalContainer(
                  <>
                    <Text style={[styles.modalTitle, isDarkMode ? styles.darkText : styles.lightText]}>
                      Confirm Delete
                    </Text>
                    <Text style={[styles.modalText, isDarkMode ? styles.darkText : styles.lightText]}>
                      Are you sure you want to delete this job posting?
                    </Text>

                    <View style={styles.modalButtonGroup}>
                      <TouchableOpacity
                        style={[styles.modalButton, styles.deleteButton]}
                        onPress={() => {
                          handleDeleteJob(selectedJobForDelete);
                          setShowDeleteJobModal(false);
                        }}
                      >
                        <Text style={styles.modalButtonText}>Delete</Text>
                      </TouchableOpacity>

                      <TouchableOpacity
                        style={[styles.modalButton, isDarkMode ? styles.darkModalButton : styles.lightModalButton]}
                        onPress={() => setShowDeleteJobModal(false)}
                      >
                        <Text style={[styles.modalButtonText, isDarkMode ? styles.darkText : styles.lightText]}>
                          Cancel
                        </Text>
                      </TouchableOpacity>
                    </View>
                  </>,
                  styles.confirmModal
                )}
              </Modal>

              {/* Seeker Profile Modal */}
              <Modal
                visible={showSeekerProfileModal}
                transparent={true}
                animationType="slide"
                onRequestClose={handleCloseSeekerProfileModal}
              >
                {renderModalContainer(
                  <>
                    <TouchableOpacity
                      style={styles.closeButton}
                      onPress={handleCloseSeekerProfileModal}
                    >
                      <Ionicons name="close" size={24} color={isDarkMode ? '#aaa' : '#555'} />
                    </TouchableOpacity>

                    {renderSeekerProfile(
                      seekers.find(s => s._id === selectedSeekerId) ||
                      applicants.find(a => a.seeker?._id === selectedSeekerId)?.seeker ||
                      null
                    )}
                  </>,
                  styles.profileModal
                )}
              </Modal>

              {/* Applicants Modal */}
              <Modal
                visible={!!selectedJobId}
                transparent={true}
                animationType="slide"
                onRequestClose={() => setSelectedJobId(null)}
              >
                {renderModalContainer(
                  <>
                    <TouchableOpacity
                      style={styles.closeButton}
                      onPress={() => setSelectedJobId(null)}
                    >
                      <Ionicons name="close" size={20} color={isDarkMode ? '#aaa' : '#555'} />
                    </TouchableOpacity>

                    <Text style={[styles.modalTitle, isDarkMode ? styles.darkText : styles.lightText]}>
                      Applicants for {postedJobs.find(j => j._id === selectedJobId)?.skills?.join(', ')}
                    </Text>

                    {applicants.filter(applicant => applicant.jobId === selectedJobId).length === 0 ? (
                      <View style={styles.emptyApplicants}>
                        <MaterialIcons name="people-outline" size={40} color={isDarkMode ? '#555' : '#aaa'} />
                        <Text style={[styles.modalText, isDarkMode ? styles.darkText : styles.lightText]}>
                          No applicants yet for this job.
                        </Text>
                      </View>
                    ) : (
                      <FlatList
                        data={applicants.filter(applicant => applicant.jobId === selectedJobId)}
                        keyExtractor={(item) => item._id.toString()}
                        renderItem={({ item }) => (
                          <View style={[styles.applicantItem, isDarkMode ? styles.darkApplicantItem : styles.lightApplicantItem]}>
                            <View style={styles.applicantInfo}>
                              <View style={[styles.applicantAvatar, isDarkMode ? styles.darkAvatar : styles.lightAvatar]}>
                                <Text style={styles.avatarText}>
                                  {item.seeker?.fullName?.charAt(0)?.toUpperCase() || 'J'}
                                </Text>
                              </View>
                              <View>
                                <Text style={[styles.applicantName, isDarkMode ? styles.darkText : styles.lightText]}>
                                  {item.seeker?.fullName || 'Unknown seeker'}
                                </Text>
                              </View>
                            </View>
                            <View style={styles.IconButton}>
                              <TouchableOpacity
                                style={styles.whatsappApplicantButton}
                                onPress={() => handleWhatsAppConnect(item.seeker?.whatsappNumber, item.seeker?.fullName)}
                              >
                                <View style={styles.whatsappButtonContent}>
                                  <FontAwesome
                                    name="whatsapp"
                                    size={16}
                                    color="#fff"
                                    style={styles.whatsappIcon}
                                  />
                                  {/* <Text style={styles.whatsappButtonText}>Message</Text> */}
                                </View>
                              </TouchableOpacity>
                              <TouchableOpacity
                                style={[styles.applicantActionButton, isDarkMode ? styles.darkButton : styles.lightButton]}
                                onPress={() => handleViewSeekerProfile(item.seeker?._id)}
                              >
                                <Text style={styles.buttonText}>View</Text>
                              </TouchableOpacity>
                            </View>
                          </View>
                        )}
                      />
                    )}
                  </>,
                  styles.applicantsModal
                )}
              </Modal>
            </>
          ) : (
            <View style={styles.loadingContainer}>
              <ActivityIndicator size="large" color={isDarkMode ? '#4a6da7' : '#007AFF'} />
              <Text style={[styles.loadingText, isDarkMode ? styles.darkText : styles.lightText]}>
                Loading profile...
              </Text>
            </View>
          )}
        </View>
      </ScrollView>

      <Footer isDarkMode={isDarkMode} />
    </Animated.View>
  );
}